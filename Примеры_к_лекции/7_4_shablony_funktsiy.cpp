#include <iostream> 
#include <strings.h>

using namespace std;

/*
Шаблоны в С++ реализуют парадигму обобщенного программирования.

Обобщённое программирование (generic programming) — парадигма 
программирования, заключающаяся в таком описании алгоритмов, 
которое можно применять к различным типам данных, не меняя сам алгоритм.
*/

struct Vec3 
{
	float x, y, z;	
	
	void print()
	{
		cout << "x: " << x << " y:"<< y << " z:" << z << endl;
	}
};

//вместо T при обнаружении компилятором вызова функции будет подставлен конкретный тип,
//и сгенерирована нужная реализация
//шаблонная функция будет работать для всех T, для которых определена операция =
//если потребуются несколько параметров - можно указывать через запятую
//template <typename T1, typename T2, typename T3....>
template<typename T>
void swapThem(T& one, T& two)
{
	T temp = one;
	one = two;
	two = temp;
}

int main(int argc, char** argv) 
{
	system("chcp 1251");

	// работаем с целочисленными значениями
	int a = 5, b = 3;
	cout << a << " " << b << endl;
	// здесь используется вариант функции swapThem<int>(), 
	// тип указывать не нужно, компилятор сам его выведет из параметров
	swapThem(a,b);
	cout << a << " " << b << endl;
	
	// работаем с значениями с плавающей точкой
	float c = 1.5f, d = 5.3f;
	cout << c << " " << d << endl;
	// здесь используется вариант функции swapThem<float>(), 
	// тип указывать не нужно, компилятор сам его выведет из параметров
	swapThem(c,d);
	cout << c << " " << d << endl;
	
	// работаем со структурой векторов
	Vec3 vec1 = {1.2f, 3.4f, 5.6f}, vec2 = {7.8f, 9.10f, 11.12f};
	vec1.print();
	vec2.print();
	// здесь используется вариант функции swapThem<Vec3>(), 
	// тип указывать не нужно, компилятор сам его выведет из параметров
	swapThem(vec1,vec2);
	vec1.print();
	vec2.print();
	
	return 0;
}

