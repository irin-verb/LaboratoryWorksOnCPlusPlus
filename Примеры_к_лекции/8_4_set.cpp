#include <iostream> 

//подключаем описание множества
#include <set>

using namespace std;

int main(int argc, char** argv) 
{
	system("chcp 1251");

	// объявляем множество
	set<int> intSet1;
	
	// добавляем один элемент, или несколько через список инициализации
	intSet1.insert(9);
	intSet1.insert({8,8,7,7,1,1,1,3,3,3,6,6,6});
	
	//выводим элементы через range-for. В множестве хранятся отсортированные уникальные элементы
	for(auto& item : intSet1 )
		cout << item << " ";
	cout << endl; 
	
	multiset<int> intSet2({8,7,1,2,3,8,8,4,4,4,3,2}); // можно сразу инициализировать списком инициализации
	
	// переберать элементы можно также через итераторы
	// в multiset хранятся дубликаты
	for(auto it = intSet2.cbegin(); it != intSet2.cend(); ++it)
		cout << *it << " ";
	cout << endl; 
	cout << endl;	
	
	 // удаление объекта из множества
	intSet1.erase(6);
	for(auto& item : intSet1 ) cout << item << " ";
	cout << endl;
	
	intSet2.erase(8); //в multiset удаляем все объекты с этим значением
	for(auto& item : intSet2 ) cout << item << " ";
	cout << endl;
	
	//получить количество элементов с заданым значением
	cout << "кол-во значения 4:"<< intSet2.count(4) << endl;
	
	//найти первое вхождение значения 4
	// в случае удачи - возвращается итератор на данное значение, 
	// в случае неудачи - возвращается итератор на конец end()
	auto it = intSet2.find(4); 
	if(it != intSet2.end())
	{
		intSet2.erase(it); // удаляем по итератору
		
		// для ассоциативных контейнеров итераторы последовательные
		// поэтому могут сдвигаться только на один элемент ++ или --
		// т.е. не поддерживают операции it + 3 например
		// для сдвига на большее кол-во элементов можно использовать
		// std::advance(), который заданное число раз применяет инкремент или декремент
		// Для ассоциативных контейнеров итератор после вставки\удаления элементов не инвалидируется
		advance(it, -3);
		intSet2.erase(it); // удаляем последнюю 2-ку
	}
		
	for(auto& item : intSet2 ) cout << item << " ";
	cout << endl;
	cout << endl;


	// при объявлении множества можно поменять порядок сортировки
	set<int,greater<int>>	intSet3({1,9,6,2,3,4,8,9});
	for(auto& item : intSet3 ) cout << item << " ";
	cout << endl;
	
	//очистка множества и проверка на пустое множество
	intSet3.clear();
	if(intSet3.empty()) 
		cout << "intSet3 пустое!" << endl;
	
	return 0;
}

